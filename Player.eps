import System as sy;
import Skill as sq;
import Display as tx;
import Mousedisplay as mp;
import Shop as so;


/* 변수 목록 */

const Player_OwnedWeaponList = [EUDArray(4), EUDArray(4), EUDArray(4)]; //플레이어 소유 무기 리스트. 총 6개까지 보유 가능
const Player_Hero_loc = $L("Hero_P1");
const Player_Target_loc = $L("Target_P1");
const SkillOption = PVariable(); //스킬 옵션 0:기본보기 1:상세히
const ShopOpen = PVariable(); //상점열기 0:닫은상태 1:열은상태
const CurPage = PVariable(); //상점강화용 페이지 분할
const Player_WeaponOwned = PVariable(); //플레이어 무기 보유 수

function GameSetting(cp) {
    const OwnedHero = sy.OwnedHero[cp];
    const epd = sy.Epd_cp[cp];
    const WeaponList = EUDArray.cast(Player_OwnedWeaponList[cp]);
    //고유무기 부여
    WeaponList[0] = sq.GiveWeaponToPlayer(OwnedHero+1);
    const Weapon = sq.WeaponList.cast(WeaponList[0]);
    Weapon.Ownedidx = 0;
    //나머지 빈공간
    WeaponList[1] = sq.GiveWeaponToPlayer(0);
    WeaponList[2] = sq.GiveWeaponToPlayer(0);
    WeaponList[3] = sq.GiveWeaponToPlayer(0);
    Player_WeaponOwned[cp] = 1;
}
const Input_Before = PVariable();
const AccelTimer = PVariable();
const AccelAmount = PVariable();
function PlayerMove(cp, epd, HeroNum, Input_Ad, Input_Ws) {
    CenterView(Player_Hero_loc+cp);
    const XHero, YHero = posread_epd(epd + 0x28/4);
    setloc(Player_Hero_loc+cp, XHero, YHero);
    if (Input_Ad > 0 || Input_Ws > 0) {
        const x = XHero + Input_Ad*18;
        const y = YHero + Input_Ws*18;
        setloc(Player_Target_loc+cp, x, y);
        Order(HeroNum, cp, Player_Hero_loc+cp, Move, Player_Target_loc+cp);
        if (sy.Stat_Rune_Accel[cp] > 0) {
            if (Input_Ad > 9999) Input_Ad = 2;
            if (Input_Ws > 9999) Input_Ws = 2;
            const Amount = Input_Ad*10 + Input_Ws;
            if (Amount == Input_Before[cp]) {
                if (AccelTimer[cp] == 0) {
                    AccelTimer[cp] = 4;
                    AccelAmount[cp] += 1;
                    sy.Set_Stat_permanent(cp, sy.SSP, 1);
                }
            } else {
                Input_Before[cp] = Input_Ad*10 + Input_Ws;
                AccelTimer[cp] = 0;
                if (AccelAmount[cp] > 0) {
                    sy.Set_Stat_permanent(cp, sy.SSP, -AccelAmount[cp]);
                    AccelAmount[cp] = 0;
                }
            }
        }
    }
    else {
        Input_Before[cp] = 0;
        AccelTimer[cp] = 0;
        if (AccelAmount[cp] > 0) {
            sy.Set_Stat_permanent(cp, sy.SSP, -AccelAmount[cp]);
            AccelAmount[cp] = 0;
        }
        Order(HeroNum, cp, Player_Hero_loc+cp, Move, Player_Hero_loc+cp);
    }
}
function KillBouns(cp) {
    for (var i = 0; i < 5; i++) {
        if (Kills(cp, AtLeast, 1, 37+i)) {
            SetKills(cp, Subtract, 1, 37+i);
            SetResources(cp, Add, 5+i*5, Ore);
            sy.PlayerGetEXP(cp, 1);
            const Amount = sy.Stat_Rune_Life[cp];
            if (Amount > 0) sy.Player_HP_Heal(cp, Amount*5, 0);
        }
    }
}
function MouseClick(cp, Option, Key_Input) {
    if (ShopOpen[cp] > 0 && Key_Input == 100) {
        ShopOpen[cp] = 0;
        tx.Display_Reset();
        if (ShopOpen[cp] == 21) {
            //상점리스트 초기화
            so.ClearList(cp);
            so.GachaCostSetting(cp, Player_WeaponOwned[cp]);
        }
    }
    if (ShopOpen[cp] == 0) { //메인창
        if (Option == 1) { //스킬 상세 옵션
            if (SkillOption[cp] == 0) SkillOption[cp] = 1;
            else if (SkillOption[cp] == 1) SkillOption[cp] = 0;
            tx.Display_Reset();
        }
        else if (Option == 2) { //도움말
            ShopOpen[cp] = 100;
            tx.Display_Reset();
        }
        else if (Option == 3) { //상점 열기
            ShopOpen[cp] = 1;
            tx.Display_Reset();
        }
    }
    else if (ShopOpen[cp] == 1) { //상점창
        if (Option == 1) { //무기상점
            ShopOpen[cp] = 2;
            tx.Display_Reset();
        }
        else if (Option == 2) { //스탯상점
            ShopOpen[cp] = 3;
            tx.Display_Reset();
        }
        else if (Option == 3) { //상점나가기
            ShopOpen[cp] = 0;
            tx.Display_Reset();
        }
    }
    else if (ShopOpen[cp] == 2) { //무기상점
        if (Option == 1) { //무기뽑기
            ShopOpen[cp] = 21;
            so.GachaCostSetting(cp, Player_WeaponOwned[cp]);
        }
        else if (Option == 2) { //무기강화
            ShopOpen[cp] = 22;
        }
        else if (Option == 3) { //무기제거
            ShopOpen[cp] = 23;
            CurPage[cp] = 0;
            tx.Display_Reset();
        }
        else if (Option == 4) { //이전창으로
            ShopOpen[cp] = 1;
            tx.Display_Reset();
        }
    }
    else if (ShopOpen[cp] == 21) { //무기가챠
        if (Option == 1) { //무기뽑기
            const Cost = so.WeaponGachaCost[cp];
            if (Accumulate(cp, AtLeast, Cost, Ore)) {
                SetResources(cp, Subtract, Cost, Ore);
                so.Gacha_Reset(cp);
                so.WeaponGacha(cp, Player_WeaponOwned[cp]);
                tx.Display_Reset();
            } else {
                tx.Display_NotAffordable(cp);
            }
        }
        else if (Option == 2) { //무기선택
            if (so.CurWeapon[cp] == 0) return;
            const WeaponList = EUDArray.cast(Player_OwnedWeaponList[cp]);
            //덱에 무기추가
            WeaponList[Player_WeaponOwned[cp]] = sq.GiveWeaponToPlayer(so.CurWeapon[cp]);
            const Weapon = sq.WeaponList.cast(WeaponList[Player_WeaponOwned[cp]]);
            Weapon.Ownedidx = Player_WeaponOwned[cp];
            Player_WeaponOwned[cp] += 1;
            //상점리스트 초기화
            so.ClearList(cp);
            so.GachaCostSetting(cp, Player_WeaponOwned[cp]);
            tx.Display_Reset();
        }
        else if (Option == 3) { //뒤로가기
            so.Gacha_Reset(cp);
            ShopOpen[cp] = 2;
            tx.Display_Reset();
        }
    }
    else if (ShopOpen[cp] == 22) { //무기강화
        const WeaponList = EUDArray.cast(Player_OwnedWeaponList[cp]);
        const CurWeapon = sq.WeaponList.cast(WeaponList[CurPage[cp]/2]);
        const Tree = EUDArray(2);
        if (CurPage[cp]%2 == 0) {
            Tree[0] = CurWeapon.WeaponTree_1;
            Tree[1] = CurWeapon.WeaponTree_2;
        }
        else {
            Tree[0] = CurWeapon.WeaponTree_2;
            Tree[1] = CurWeapon.WeaponTree_1;
        }
        if (Option >= 1 && Option <= 4) { //강화 구매
            if (CurWeapon.Index == 0) {
                tx.Display_NotAffordable(cp);
            } else {
                const Cond = so.WeaponEnhance(cp, Option-1, Tree[0], Tree[1]);
                if (Cond == 1) {
                    //sq.WeaponUpgrade(CurWeapon, CurPage[cp], Tree[0]);
                    if (CurPage[cp]%2 == 0) CurWeapon.WeaponTree_1 += 1;
                    else CurWeapon.WeaponTree_2 += 1;
                }
            }
        }
        else if (Option == 5) { //이전창
            if (CurPage[cp] > 0) CurPage[cp] -= 1;
            tx.Display_Reset();
        }
        else if (Option == 6) { //돌아가기
            if (CurPage[cp] > 0) CurPage[cp] = 0;
            ShopOpen[cp] = 2;
            tx.Display_Reset();
        }
        else if (Option == 7) { //다음창
            if (CurPage[cp] < 7) CurPage[cp] += 1;
            tx.Display_Reset();
        }
    }
    else if (ShopOpen[cp] == 23) { //무기분해
        if (Option == 1) { //분해하기
            const WeaponList = EUDArray.cast(Player_OwnedWeaponList[cp]);
            const CurWeapon = sq.WeaponList.cast(WeaponList[CurPage[cp]]);
            if (CurWeapon.Index <= 6) { //폐기불가 판정
                tx.Display_NotAffordable(cp);
            } else {
                //무기 리스트에 다시 넣기
                sq.WeaponReset(CurWeapon); //객체 내부값 초기화: 강화횟수 및 스킬 데미지
                so.RefillWeaponToList(CurWeapon.Index); //원래 있던 큐에 다시 넣기
                //골드 돌려받기
                const Tree_1 = CurWeapon.WeaponTree_1;
                const Tree_2 = CurWeapon.WeaponTree_2;
                const Cost = 100 + Tree_1*Tree_1*50 + Tree_2*Tree_2*50;
                SetResources(cp, Add, Cost, Ore);
                //무기 존재 소멸
                WeaponList[CurPage[cp]] = sq.GiveWeaponToPlayer(0);
                Player_WeaponOwned[cp] -= 1;
                so.GachaCostSetting(cp, Player_WeaponOwned[cp]);
                tx.Display_Reset();
            }
        }
        else if (Option == 2) { //강화제거
            const WeaponList = EUDArray.cast(Player_OwnedWeaponList[cp]);
            const CurWeapon = sq.WeaponList.cast(WeaponList[CurPage[cp]]);
            //골드 돌려받기
            const Tree_1 = CurWeapon.WeaponTree_1;
            const Tree_2 = CurWeapon.WeaponTree_2;
            const Cost = Tree_1*Tree_1*25 + Tree_2*Tree_2*25;
            SetResources(cp, Add, Cost, Ore);
            //강화초기화
            CurWeapon.WeaponTree_1 = 0;
            CurWeapon.WeaponTree_2 = 0;
        }
        else if (Option == 3) { //다음무기
            CurPage[cp] += 1;
            if (CurPage[cp] >= 4) CurPage[cp] = 0;
            tx.Display_Reset();
        }
        else if (Option == 4) { //돌아가기
            if (CurPage[cp] > 0) CurPage[cp] = 0;
            ShopOpen[cp] = 2;
            tx.Display_Reset();
        }
    }
    else if (ShopOpen[cp] == 3) { //아이템상점
        if (Option == 1) { //리롤
            const Amount = so.ShopRerollCost[cp];
            if (Accumulate(cp, AtLeast, Amount, Ore)) {
                SetResources(cp, Subtract, Amount, Ore);
                so.ItemRoll(cp, 0);
            }
        }
        for (var i = 0; i < 5; i++) {
            if (Option == i+2) { //아이템 구매
                const cpItemList = EUDArray.cast(so.PlayerShopList[cp]);
                const List = so.ItemList.cast(so.ItemArray[cpItemList[i]]);
                const Cost = sy.CostCalculation(cp, List.Cost);
                if (Accumulate(cp, AtLeast, Cost, Ore) && List.Index > 0) {
                    SetResources(cp, Subtract, Cost, Ore);
                    sy.ItemStatSetting(cp, List.StatList, List.Amount, List.ListLength);
                    const temp = EUDArray.cast(so.PlayerItem[cp]);
                    temp[cpItemList[i]] += 1;
                    cpItemList[i] = 0;
                    sy.PlayerGetEXP(cp, 15);
                }
            }
        }
        if (Option == 7) { //나가기
            ShopOpen[cp] = 1;
            CurPage[cp] = 0;
            tx.Display_Reset();
        }
    }
    else if (ShopOpen[cp] == 100) { //도움말
        if (Option == 1) { //게임설명
            ShopOpen[cp] = 101;
            CurPage[cp] = 0;
            tx.Display_Reset();
        }
        else if (Option == 2) { //스탯확인
            ShopOpen[cp] = 102;
            CurPage[cp] = 0;
            tx.Display_Reset();
        }
        else if (Option == 3) { //특성확인
            ShopOpen[cp] = 103;
            CurPage[cp] = 0;
            tx.Display_Reset();
        }
        else if (Option == 4) { //뒤로가기
            ShopOpen[cp] = 0;
            CurPage[cp] = 0;
            tx.Display_Reset();
        }
    }
    else if (ShopOpen[cp] == 101) { //게임설명
        if (Option == 1) { //이전페이지
            if (CurPage[cp] == 0) {
                CurPage[cp] = 5;
            } else {
                CurPage[cp] -= 1;
            }
        }
        if (Option == 2) { //나가기
            ShopOpen[cp] = 100;
            CurPage[cp] = 0;
            tx.Display_Reset();
        }
        if (Option == 3) { //다음페이지
            if (CurPage[cp] == 5) {
                CurPage[cp] = 0;
            } else {
                CurPage[cp] += 1;
            }
        }
    }
    else if (ShopOpen[cp] == 102) { //스탯확인
        if (Option == 1) { //이전페이지
            if (CurPage[cp] > 0) {
                CurPage[cp] -= 1;
            }
        }
        if (Option == 2) { //다음페이지
            if (CurPage[cp] < 23) {
                CurPage[cp] += 1;
            }
        }
        if (Option == 3) { //자세히
            if (mp.SeeDetail[cp] == 0) mp.SeeDetail[cp] = 1;
            else if (mp.SeeDetail[cp] == 1) mp.SeeDetail[cp] = 0;
        }
    }
}

function GamePlay(cp, Input_Normal, Input_Ad, Input_Ws) {
    const OwnedHero = sy.OwnedHero[cp];
    const epd = sy.Epd_cp[cp];
    const WeaponList = EUDArray.cast(Player_OwnedWeaponList[cp]);
    if (epd > 0) {
        const OrderId = bread_epd(epd + 0x4C/4, 1);
        if (OrderId == 0) { //사망확인
            sy.PlayerDeath(cp);
        } else { //살아있음
            //테스트코드
            ModifyUnitHitPoints(All, "Men", cp, "Anywhere", 100);
            //테스트코드 
            //영웅유닛 이동
            PlayerMove(cp, epd, OwnedHero, Input_Ad, Input_Ws);
            //스킬발동용
            sq.SkillActivation(cp, epd, WeaponList);
            //스킬인식용
            //지속발동
            sy.Player_StatCheck(cp);
            sy.Shop_LevelCheck(cp);
            sy.Debuff_Remove(cp);
            so.ShopPlay(cp);
            //에러줄
            tx.Game_ErrorLine_Display(cp);
            //버벅임제거
            SetMemoryXEPD(epd + 0xDC/4, SetTo, 0, 0x40000);
        }
    } else { //죽어있는동안 돌아가는 함수
        sy.DeathTrigger(cp);
    }
    sq.UnitAttackChecking(cp, sy.ReviveTimer[cp], WeaponList);
    //텍스트 띄우기
    const ClickOption = mp.PlayerDisplay_Display(cp, WeaponList, SkillOption[cp], ShopOpen[cp], CurPage[cp]);
    MouseClick(cp, ClickOption, Input_Normal);
    KillBouns(cp);
}